#! /usr/bin/env bash

set -euo pipefail

input_json="$(cat)"

# parse out the input params
## params
build_status=$(       echo "${input_json}" | jq    '.params.build_status'  )
severity=$(           echo "${input_json}" | jq -r '.params.severity? // "3"')

## source
private_key=$(        echo "${input_json}" | jq    '.source.private_key'                                               )
coralogix_host=$(     echo "${input_json}" | jq -r '.source.coralogix_host? // "https://api.coralogix.com/api/v1/logs"')
subsystem_name=$(     echo "${input_json}" | jq    ".source.subsystem_name? // \"$BUILD_PIPELINE_NAME\""                   )
application_name=$(   echo "${input_json}" | jq    '.source.application_name? // "concourse"'                          )
timestamp=$(date +%s000)

body=$(jq -c \
  <<EOF
{
  "privateKey": $private_key,
  "applicationName": $application_name,
  "subsystemName": $subsystem_name,
  "logEntries":
    [
       {
          "timestamp": $timestamp,
          "severity": "$severity",
          "text": {
            "build_status": $build_status,
            "job_name": "$BUILD_JOB_NAME"
          }
        }

    ]
}
EOF
)

## retry mechanism
## currently hardcoded to 5

http_status_code=
for i in $(seq 1 5); do
  http_status_code=$(curl \
    -XPOST \
    --header 'Content-Type: application/json' \
    --data "${body}" \
    --silent \
    --output /dev/null \
    --write-out "%{http_code}" \
    "${coralogix_host}")

  if [[ $http_status_code -eq 200 ]]; then
    break
  fi
done

if [[ $http_status_code -ne 200 ]]; then
  echo "[ERROR][HTTP status code: $http_status_code] The Coralogix API declined the logs!" 1>&2
  echo '{"version":{"hash":"none"},"metadata":[]}'
else
  echo '{"version":{"hash":"none"},"metadata":[]}'
fi
