#!/bin/sh

set -euo pipefail

util_loc="/opt/resource/util.sh"

if [[ ! -f "${util_loc}" ]]; then
  util_loc="./util.sh"
fi

# shellcheck source=./util.sh
source ${util_loc}

input_json="$(cat)"

# parse out the input params
## required
private_key=$(        echo "${input_json}" | jq -r '.source.private_key'     )
application_name=$(   echo "${input_json}" | jq -r '.source.application_name')
subsystem_name=$(     echo "${input_json}" | jq -r '.source.subsystem_name'  )

concourse_username=$( echo "${input_json}" | jq -r '.source.concourse_username' )
concourse_password=$( echo "${input_json}" | jq -r '.source.concourse_password' )

# optional
coralogix_host=$(     echo "${input_json}" | jq -r '.source.coralogix_host? // "api.coralogix.com"' )
computer_name=$(      echo "${input_json}" | jq -r '.source.computer_name? // empty'                )
concourse_url=$(      echo "${input_json}" | jq -r ".source.concourse_url? // \"$ATC_EXTERNAL_URL\"")

# validate
## private_key must be defined
if [[ "${private_key}" == "null" ]]; then
  echo "[ERROR] private_key was not defined! Please define private_key so that this resource can authenticate with the Coralogix API." 1>&2
  exit 1
fi
## application_name must be defined
if [[ "${application_name}" == "null" ]]; then
  echo "[ERROR] application_name was not defined! Please define application_name so that this resource will know which application name to use when Coralogix categorizing the logs sent." 1>&2
  exit 1
fi
## subsystem_name must be defined
if [[ "${subsystem_name}" == "null" ]]; then
	echo "[ERROR] subsystem_name was not defined! Please define subsystem_name so that this resource will know which subsystem name to use when Coralogix categorizing the logs sent." 1>&2
	exit 1
fi
## concourse_username must be defined
if [[ "${concourse_username}" == "null" ]]; then
	echo "[ERROR] Wrong concourse credentials!" 1>&2
	exit 1
fi
## concourse_password must be defined
if [[ "${concourse_password}" == "null" ]]; then
	echo "[ERROR] Wrong concourse credentials!" 1>&2
	exit 1
fi

## install fly
fly ${concourse_url} ${concourse_username} ${concourse_password} $BUILD_TEAM_NAME

## execute
job_metadata=$(fly curl /api/v1/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME | jq .finished_build)
if [[ "$?" -ne 0 ]]; then
  echo "[ERROR] Unable to fetch the job status." 1>&2
  exit 1
fi

## logs enrichment
start_time=$(echo ${job_metadata} | jq .start_time)
end_time=$(echo ${job_metadata} | jq .end_time)
timestamp="${start_time}000"

finished_build_status=$(echo job_metadata | jq .status)
severity=3 # info
if [[ ${finished_build_status} != "succeeded" ]]; then severity=5; fi

# how long it took the build to finish
duration=$((end_time-start_time))

logs_enrichment=$( echo "{
  \"timestamp\": \"${timestamp}\", 
  \"duration\": ${duration},
  \"severity\": ${severity},
  \"text\": \"Build $BUILD_JOB_NAME for pipeline $BUILD_PIPELINE_NAME took ${duration} and finished with status ${finished_build_status}.\"
}")

logs_entry=$(echo ${job_metadata} | jq "map(. + ${logs_enrichment})")

metadata=$(echo "
  \"privateKey\":\"${private_key}\",
  \"applicationName\":\"${application_name}\",
  \"subsystemName\":\"${subsystem_name}\",
  ")


## computer_name is optional
if [[ "${computer_name}" != "null" ]]; then
  metadata+="\"computerName\":\"${computer_name}\","
fi

# body to send
body=$(echo "{ ${metadata} logsEntries: [ ${logs_entry} ] }" | jq .)

## retry mechanism
## currently hardcoded to 5
for i in `seq 1 5`; do
http_status_code=$(curl -XPOST -H "Content-Type: application/json" -d "${body}" \ 
  -s -o /dev/null -I -w "%{http_code}" "https://${coralogix_host}/api/v1/logs")

if [[ "${http_status_code}" -eq 200 ]]; then
  break;
fi
done

if [[ "${http_status_code}" -ne 200 ]]; then
  echo "[ERROR] logs were declined by Coralogix API!" 1>&2
  exit 1
fi

