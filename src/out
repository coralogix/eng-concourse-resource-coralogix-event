#! /usr/bin/env bash

set -euo pipefail

input_json="$(cat)"

## source
private_key=$(        echo "$input_json" | jq -r '.source.private_key'                                               )
coralogix_host=$(     echo "$input_json" | jq -r '.source.coralogix_host? // "https://api.coralogix.com/api/v1/logs"')
application_name=$(   echo "$input_json" | jq -r '.source.application_name? // "concourse-build-events"'                          )
subsystem_name=$(     echo "$input_json" | jq -r ".source.subsystem_name? // \"$BUILD_PIPELINE_NAME\""               )
concourse_url=$(      echo "$input_json" | jq -r ".source.concourse_url? // \"$ATC_EXTERNAL_URL\""                   )
dry_mode=$(           echo "$input_json" | jq -r ".source.dry_mode? // false"                                        )

# validation - the following must be defined
if [[ "$private_key" == '' ]]; then
  echo >&2 '[ERROR] private_key was not defined! Please define private_key so that this resource can authenticate with the Coralogix API.'
  exit 1
fi

timestamp=$(date +%s)

## params
build_status=$(           echo "${input_json}" | jq -r '.params.build_status'                                                                  )
severity=$(               echo "${input_json}" | jq -r '.params.severity? // "3"'                                                              )
message=$(                echo "${input_json}" | jq -r --arg default "The job $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME reported: $build_status" \
                                                       ".params.message? // \$default"                                                         )
labels=$(                 echo "${input_json}" | jq -c '.params.labels? // {}'                                                                 )
additional_details_file=$(echo "${input_json}" | jq -r '.params.additional_details_file? // "/dev/null"'                                       )

if [[ "$additional_details_file" != /dev/null ]]; then
  if [[ ! -f "$additional_details_file" ]] || [[ ! -r "$additional_details_file" ]]; then
    echo >&2 -n "[WARN][additonal_details_file: ${additional_details_file}] additional_details_file was not found. Waiting for it to appear ..."
  fi

  retry_count=1
  max_retries=100
  sleep_amount='0.1'
  while [[ $retry_count -le $max_retries ]]; do
    if [[ ! -f "$additional_details_file" ]] || [[ ! -r "$additional_details_file" ]]; then
      sleep $sleep_amount
      echo >&2 -n '.'
    else
      break
    fi
    ((retry_count+=1))
  done
  echo >&2 '' # newline, after periods added to prior line

  if [[ ! -f "$additional_details_file" ]] || [[ ! -r "$additional_details_file" ]]; then
    echo >&2 "[ERROR][additonal_details_file: ${additional_details_file}] The additional_details_file was not found, or not readable!"
    exit 1
  else
    echo >&2 -n "[INFO][additonal_details_file: ${additional_details_file}] Found additional_details_file."
  fi
fi

read -d '' jq_input <<EOF || true
{
  "privateKey": \$privateKey,
  "applicationName": \$applicationName,
  "subsystemName": \$subsystemName,
  "logEntries":
    [
       {
          "timestamp": \$timestamp,
          "severity": \$severity,
          "text": {
            "build_url": \$build_url,
            "build_status": \$build_status,
            "build_id": \$build_id,
            "build_name": \$build_name,
            "build_job_name": \$build_job_name,
            "build_pipeline_name": \$build_pipeline_name,
            "build_team_name": \$build_team_name,
            "message": \$message,
            "labels": \$labels,
            "additional_details": \$additional_details,
          }
        }
    ]
}
EOF

body=$(jq -cn \
  --arg     privateKey "$private_key" \
  --arg     applicationName "$application_name" \
  --arg     subsystemName "$subsystem_name" \
  --arg     timestamp "${timestamp}000" \
  --arg     severity "$severity" \
  --arg     build_url "$concourse_url/builds/$BUILD_ID" \
  --arg     build_status "$build_status" \
  --arg     build_id "$BUILD_ID" \
  --argjson build_name "$BUILD_NAME" \
  --arg     build_job_name "$BUILD_JOB_NAME" \
  --arg     build_pipeline_name "$BUILD_PIPELINE_NAME" \
  --arg     build_team_name "$BUILD_TEAM_NAME" \
  --arg     message "$message" \
  --argjson labels "$labels" \
  --rawfile additional_details "$additional_details_file" \
  "$jq_input"
)

if [[ "$dry_mode" == 'true' ]]; then
  echo >&2 '[DEBUG] Dry mode enabled - not sending to the Coralogix API.'
else
  ## retry mechanism
  ## currently hardcoded to 5

  http_status_code=
  num_retries=5
  for i in $(seq 1 $num_retries); do
    http_status_code=$(curl \
      -XPOST \
      --header 'Content-Type: application/json' \
      --data "$body" \
      --silent \
      --output /dev/null \
      --write-out "%{http_code}" \
      "$coralogix_host")

    if [[ $http_status_code -eq 200 ]]; then
      break
    elif [[ $i -ne $num_retries ]]; then
      echo >&2 "[WARN][HTTP status code: $http_status_code] Did not receive a 200 HTTP status code. Trying again..."
    fi
  done

  if [[ $http_status_code -ne 200 ]]; then
    echo >&2 "[ERROR][HTTP status code: $http_status_code] The Coralogix API declined the logs!"
    exit 1
  fi
fi
echo '{"version":{"hash":"none"},"metadata":[]}'
